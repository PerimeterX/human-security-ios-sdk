// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name HUMAN
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AppleArchive
import CommonCrypto
import CoreGraphics
import CoreMotion
import CoreTelephony
import CryptoKit
import DeveloperToolsSupport
import Foundation
@_exported import HUMAN
import Network
import Security
import Swift
import SwiftUI
import System
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let HumanSecurityErrorDomain: Swift.String
@objc public enum HumanSecurityErrorType : Swift.Int {
  case internalError = 0
  case missingAppId = 1
  case invalidAppId = 2
  case startNotCalledOnMainThread = 3
  case startCalledMoreThanOnce = 4
  case tokenWasNotGenerated = 5
  case startWasNotCalled = 6
  case httpBodyInputStreamReadFailed = 7
  case automaticInterceptorIsNotConfiguredCorrectly = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class HumanSecurity : ObjectiveC.NSObject {
  @objc public static let BD: HUMAN.HSBotDefender
  @objc public static let AD: HUMAN.HSAccountDefender
  @objc public static func start(appId: Swift.String, policy: HUMAN.HSPolicy) throws
  @objc public static func start(appIds: [Swift.String], policy: HUMAN.HSPolicy) throws
  @objc public static func vid(forAppId appId: Swift.String? = nil) -> Swift.String?
  @objc public static func setupWebView(webView: WebKit.WKWebView, navigationDelegate: (any WebKit.WKNavigationDelegate)?)
  @objc public static func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum HSAutomaticInterceptorType : Swift.Int {
  case none = 0
  case intercept = 1
  case interceptWithDelayedResponse = 2
  case interceptAndRetryRequest = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class HSHybridAppPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var automaticSetup: Swift.Bool
  @objc public var allowJavaScriptEvaluation: Swift.Bool
  @objc public var supportExternalWebViews: Swift.Bool
  @objc public func set(webRootDomains domains: Swift.Set<Swift.String>, forAppId appId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class HSAccountDefender : ObjectiveC.NSObject {
  @objc final public func setUserId(userId: Swift.String?, forAppId appId: Swift.String?) throws
  @objc final public func registerOutgoingUrlRequest(url: Swift.String, forAppId appId: Swift.String?) throws
  @objc final public func setAdditionalData(parameters: [Swift.String : Swift.String], forAppId appId: Swift.String?) throws
  @objc deinit
}
public let HSBotDefenderErrorDomain: Swift.String
@objc public enum HSBotDefenderErrorType : Swift.Int {
  case unknown
  case requestWasBlocked
  case challengeWasSolved
  case challengeWasCancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HSBotDefenderChallengeResult : Swift.Int {
  case solved
  case cancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol HSBotDefenderDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func botDefenderRequestBlocked(url: Foundation.URL?, appId: Swift.String)
  @objc optional func botDefenderChallengeSolved(forAppId appId: Swift.String)
  @objc optional func botDefenderChallengeCancelled(forAppId appId: Swift.String)
  @objc optional func botDefenderChallengeRendered(forAppId appId: Swift.String)
  @objc optional func botDefenderChallengeRenderFailed(forAppId appId: Swift.String)
  @objc optional func botDefenderDidUpdateHeaders(headers: [Swift.String : Swift.String], forAppId appId: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class HSBotDefender : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any HUMAN.HSBotDefenderDelegate)?
  @objc final public func headersForURLRequest(forAppId appId: Swift.String?) -> [Swift.String : Swift.String]
  @objc final public func canHandleResponse(response: Foundation.URLResponse?, data: Foundation.Data) -> Swift.Bool
  @objc final public func handleResponse(response: Foundation.URLResponse?, data: Foundation.Data, callback: ((HUMAN.HSBotDefenderChallengeResult) -> ())?) -> Swift.Bool
  @objc final public func setCustomParameters(parameters: [Swift.String : Swift.String], forAppId appId: Swift.String?) throws
  @objc final public func challengeReferenceId() -> Swift.String
  @objc final public func errorType(error: any Swift.Error) -> HUMAN.HSBotDefenderErrorType
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HSDetectionPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var allowTouchDetection: Swift.Bool
  @objc public var allowDeviceMotionDetection: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HSDoctorAppPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var enabled: Swift.Bool
  @objc public var bypassMonitorHeaderKey: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HSAutomaticInterceptorPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var interceptorType: HUMAN.HSAutomaticInterceptorType
  @objc public static var urlSessionConfiguration: Foundation.URLSessionConfiguration
  @objc public static var urlSessionDelegate: (any Foundation.URLSessionDelegate)?
  @objc public static var urlSessionRequestTimeout: Foundation.TimeInterval
  @objc public static var urlSessionQueueDelegate: Foundation.OperationQueue?
  @objc public func set(interceptedDomains domains: Swift.Set<Swift.String>, forAppId appId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HSPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var hybridAppPolicy: HUMAN.HSHybridAppPolicy
  @objc public var automaticInterceptorPolicy: HUMAN.HSAutomaticInterceptorPolicy
  @objc public var detectionPolicy: HUMAN.HSDetectionPolicy
  @objc public var doctorAppPolicy: HUMAN.HSDoctorAppPolicy
  @objc public var allowSharingPolicyWithHuman: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HSError : Foundation.NSError {
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension HUMAN.HumanSecurityErrorType : Swift.Equatable {}
extension HUMAN.HumanSecurityErrorType : Swift.Hashable {}
extension HUMAN.HumanSecurityErrorType : Swift.RawRepresentable {}
extension HUMAN.HSAutomaticInterceptorType : Swift.Equatable {}
extension HUMAN.HSAutomaticInterceptorType : Swift.Hashable {}
extension HUMAN.HSAutomaticInterceptorType : Swift.RawRepresentable {}
extension HUMAN.HSBotDefenderErrorType : Swift.Equatable {}
extension HUMAN.HSBotDefenderErrorType : Swift.Hashable {}
extension HUMAN.HSBotDefenderErrorType : Swift.RawRepresentable {}
extension HUMAN.HSBotDefenderChallengeResult : Swift.Equatable {}
extension HUMAN.HSBotDefenderChallengeResult : Swift.Hashable {}
extension HUMAN.HSBotDefenderChallengeResult : Swift.RawRepresentable {}
