{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/Native_Basic_Implementation"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN"]]},"metadata":{"roleHeading":"Article","modules":[{"name":"HUMAN"}],"role":"article","title":"Native - Basic Implementation"},"variants":[{"paths":["\/documentation\/human\/native_basic_implementation"],"traits":[{"interfaceLanguage":"swift"}]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/human\/native_basic_implementation"]}],"primaryContentSections":[{"content":[{"anchor":"Introduction","text":"Introduction","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"In this article we will learn how integrate the SDK to your native iOS\/Android app."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Highlights:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Few points of integration."}]}]},{"content":[{"inlineContent":[{"text":"Handle blocked requests.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Get notified when a challenge was solved\/cancelled.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Great for analytics, logs, etc.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"NOT","type":"text"}]},{"text":" recommended to use as a trigger for sending the URL request again.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"The SDK does not intercept your URL requests"}],"type":"strong"},{"text":".","type":"text"}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"We will cover the following topics:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#how-to-start-the-sdk","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#bot-defender-integration","isActive":true}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"How to add the SDK’s HTTP headers to your URL requests."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to handle the blocked request."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to present a challenge to the user."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"How to set custom parameters (optional)."}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#account-defender-integration","type":"reference"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to enable it."}]}]},{"content":[{"inlineContent":[{"text":"How to notify HUMAN’s backend on outgoing URL requests from the app.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"How to set additional data (optional)."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}]},{"level":2,"type":"heading","text":"How to start the SDK","anchor":"How-to-start-the-SDK"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The most important thing is to start the SDK as soon as possible in your app flow. The reason for that is when your app will send an URL request to your server before the SDK was started, the request will not include the SDK’s HTTP headers. As a result, HUMAN’s Enforcer could block the request and the SDK will not be able to present a challenge to the user. The best place to start the SDK is in the:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Application"},{"type":"text","text":"’s "},{"code":"onCreate","type":"codeVoice"},{"type":"text","text":" function on Android."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"AppDelegate","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"didFinishLaunchingWithOptions","type":"codeVoice"},{"text":" function on iOS.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You should start the SDK on the ","type":"text"},{"inlineContent":[{"type":"text","text":"main thread"}],"type":"strong"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"text":"Here is an example of how it should be:","type":"text"}],"type":"paragraph"},{"anchor":"Android","level":3,"text":"Android","type":"heading"},{"inlineContent":[{"text":"Kotlin:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["import android.app.Application","import com.humansecurity.mobile_sdk.HumanSecurity","import com.humansecurity.mobile_sdk.main.policy.HSPolicy","import com.humansecurity.mobile_sdk.main.policy.HSAutomaticInterceptorType","","class MainApplication: Application() {","","    override fun onCreate() {","        super.onCreate()","        startHumanSDK()","    }","","    private fun startHumanSDK() {","        try {","            val policy = HSPolicy()","            policy.automaticInterceptorPolicy.interceptorType = HSAutomaticInterceptorType.NONE","","            HumanSecurity.start(this, \"<APP_ID>\", policy)","        }","        catch (exception: Exception) {","            println(\"exception: ${exception.message}\")","        }","    }","}"],"syntax":"kotlin"},{"type":"paragraph","inlineContent":[{"text":"Java:","type":"text"}]},{"syntax":"java","type":"codeListing","code":["import android.app.Application;","import android.util.Log;","import com.humansecurity.mobile_sdk.HumanSecurity;","import com.humansecurity.mobile_sdk.main.policy.HSPolicy;","import com.humansecurity.mobile_sdk.main.policy.HSAutomaticInterceptorType;","","public class MainApplication extends Application {","","    @Override","    public void onCreate() {","        super.onCreate();","        startHumanSDK();","    }","","    void startHumanSDK() {","        try {","            HSPolicy policy = new HSPolicy();","            policy.getAutomaticInterceptorPolicy().setInterceptorType(HSAutomaticInterceptorType.NONE);","","            HumanSecurity.INSTANCE.start(this, \"<APP_ID>\", policy);","        }","        catch (Exception exception) {","            Log.e(\"MainApplication\",\"error: \" + exception.getMessage());","        }","    }","}"]},{"type":"heading","level":3,"anchor":"iOS","text":"iOS"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","code":["import UIKit","import HUMAN","","@main","class AppDelegate: UIResponder, UIApplicationDelegate {","","    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","        startHumanSDK()","        return true","    }","","    func startHumanSDK() {","        do {","            let policy = HSPolicy()","            policy.automaticInterceptorPolicy.interceptorType = .none","            ","            try HumanSecurity.start(appId: \"<APP_ID>\", policy: policy)","        }","        catch {","            print(\"Error: \\(error)\")","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"syntax":"objc","type":"codeListing","code":["@import HUMAN;","","@implementation AppDelegate","","- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {","    [self startHumanSDK];","    return YES;","}","","- (void)startHumanSDK {","    HSPolicy *policy = [[HSPolicy alloc] init];","    policy.automaticInterceptorPolicy.interceptorType = HSAutomaticInterceptorTypeNone;","","    NSError *error = nil;","    [HumanSecurity startWithAppId:@\"<APP_ID>\" policy:policy error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}","","@end"]},{"type":"paragraph","inlineContent":[{"text":"Don’t forget to change the ","type":"text"},{"code":"<APP_ID>","type":"codeVoice"},{"type":"text","text":" to your own AppID."}]},{"inlineContent":[{"type":"text","text":"Let’s talk about what we have in the code here:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"We start the SDK as soon as possible and on the main thread.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"We create a ","type":"text"},{"code":"HSPolicy","type":"codeVoice"},{"text":" instance. This object is used to configure the SDK’s behavior. Here, we set the ","type":"text"},{"type":"codeVoice","code":"automaticInterceptorPolicy.interceptorType"},{"type":"text","text":" property to "},{"code":"none","type":"codeVoice"},{"text":". This means that the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Automatic Interception","type":"text"}]},{"text":" feature of the SDK is disabled. In short, this feature allows the SDK to manipulate URL requests and handle their responses by itself.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"We call the ","type":"text"},{"type":"codeVoice","code":"start"},{"type":"text","text":" function of the SDK. We provide the following parameters:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance (Android only)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Your AppID."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The policy object that we configured."}]}]}]}]}]},{"inlineContent":[{"type":"text","text":"Note: If your app communicates with several servers that have different AppID, you can call the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appIds:policy:)","isActive":true,"type":"reference"},{"type":"text","text":" function which allow you to pass an array of AppIDs. You should specify the relevant AppID for each API call in the SDK."}],"type":"paragraph"},{"text":"Bot Defender integration","level":2,"anchor":"Bot-Defender-integration","type":"heading"},{"anchor":"How-to-add-the-SDKs-HTTP-headers-to-your-URL-requests-and-handle-the-blocked-request","level":3,"text":"How to add the SDK’s HTTP headers to your URL requests and handle the blocked request","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The SDK provides HTTP headers that should be added to your app’s URL requests. ","type":"text"},{"type":"strong","inlineContent":[{"text":"It is essential that those HTTP headers will be included on every URL request","type":"text"}]},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You ","type":"text"},{"inlineContent":[{"text":"should not","type":"text"}],"type":"strong"},{"text":" cache those HTTP headers. They contain a token with expiration date. The SDK manages this token to be up-to-date.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The SDK handles the blocked request and present a challenge to the user."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Here is an example of how it should be:"}],"type":"paragraph"},{"level":4,"anchor":"Android","type":"heading","text":"Android"},{"inlineContent":[{"text":"In this code example we assume your app uses ","type":"text"},{"type":"reference","identifier":"https:\/\/square.github.io\/okhttp\/","isActive":true},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"https:\/\/ktor.io\/"},{"text":". We recommend to create a custom ","type":"text"},{"identifier":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","type":"reference","isActive":true},{"text":" for this task. However, you may use any HTTP client of your choice and implement the same logic.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Kotlin:","type":"text"}]},{"type":"codeListing","syntax":"kotlin","code":["import com.humansecurity.mobile_sdk.HumanSecurity","import okhttp3.Interceptor","import okhttp3.Response","import okhttp3.ResponseBody.Companion.toResponseBody","","class BotDefenderInterceptor: Interceptor {","","    override fun intercept(chain: Interceptor.Chain): Response {","        val newRequest = chain.request().newBuilder()","        val humanHttpHeaders = HumanSecurity.BD.headersForURLRequest(\"<APP_ID>\") ","        for ((key, value) in humanHttpHeaders) {","            newRequest.header(key, value)","        }","        val response = chain.proceed(newRequest.build())","        if (!response.isSuccessful) {","            response.body?.string()?.let { responseString ->","                val isHandled = HumanSecurity.BD.handleResponse(responseString) { result ->","                    println(\"Challenge result = $result\")","                }","                if (isHandled) {","                    println(\"Blocked response was handled by the SDK\")","                    return response.newBuilder().body(HumanSecurity.BD.errorBody(HSBotDefenderErrorType.REQUEST_WAS_BLOCKED).toResponseBody()).build()","                }","            }","        }","        return response","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Kotlin (OkHttp):","type":"text"}]},{"syntax":"kotlin","type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity","import com.humansecurity.mobile_sdk.main.HSBotDefenderErrorType","import okhttp3.OkHttpClient","import okhttp3.Request","","class MyHttpClient {","","    private val okHttpClient: OkHttpClient = OkHttpClient.Builder()","        .addInterceptor(BotDefenderInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","        .build()","","    fun sendRequest(url: String) {","        try {","            val request: Request = Request.Builder().url(url).build()","            okHttpClient.newCall(request).execute().use { response ->","                if (!response.isSuccessful) {","                    response.body?.string()?.let { responseBody ->","                        when (HumanSecurity.BD.errorType(responseBody)) {","                            HSBotDefenderErrorType.REQUEST_WAS_BLOCKED -> {","                                println(\"Request was blocked\")","                            }","                            else -> {","                                println(\"Unknown error\")","                            }","                        }","                    }","                }","            }","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kotlin (ktor):"}]},{"syntax":"kotlin","code":["import com.humansecurity.mobile_sdk.HumanSecurity","import io.ktor.client.*","import io.ktor.client.call.body","import io.ktor.client.engine.okhttp.*","import io.ktor.client.request.*","import io.ktor.client.statement.*","","class MyHttpClient {","","    private val httpClient: HttpClient = HttpClient(OkHttp) {","        engine {","            addInterceptor(BotDefenderInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","        }","    }","","    suspend fun sendRequest(url: String) {","        try {","            val response: HttpResponse = httpClient.request(url) {}","            val responseBody = response.body<String>()","            when (HumanSecurity.BD.errorType(responseBody)) {","                HSBotDefenderErrorType.REQUEST_WAS_BLOCKED -> {","                    println(\"Request was blocked\")","                }","                else -> {","                    println(\"Unknown error\")","                }","            }","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Java:","type":"text"}],"type":"paragraph"},{"syntax":"java","type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import com.humansecurity.mobile_sdk.main.HSBotDefenderErrorType;","import java.util.HashMap;","import android.util.Log;","import java.io.IOException;","import okhttp3.Interceptor;","import okhttp3.Request;","import okhttp3.Response;","import okhttp3.ResponseBody;","import okhttp3.MediaType;","","public class BotDefenderInterceptor implements Interceptor {","","    @Override","    public Response intercept(Chain chain) throws IOException {","        Request.Builder newRequest = chain.request().newBuilder();","        HashMap<String, String> humanHttpHeaders = HumanSecurity.INSTANCE.getBD().headersForURLRequest(\"<APP_ID>\");","        for (HashMap.Entry<String, String> entry : humanHttpHeaders.entrySet()) {","            String key = entry.getKey();","            String value = entry.getValue();","            newRequest.header(key, value);","        }","        Response response = chain.proceed(newRequest.build());","        if (!response.isSuccessful()) {","            ResponseBody responseBody = response.body();","            if (responseBody != null) {","                String responseString = responseBody.string();","                boolean didHandleResponse = HumanSecurity.INSTANCE.getBD().handleResponse(responseString, result -> {","                    Log.i(\"BotDefenderInterceptor\", \"Challenge result = \" + result);","                    return null;","                });","                if (didHandleResponse) {","                    Log.i(\"BotDefenderInterceptor\", \"Blocked response was handled by the SDK\");","                    return response.newBuilder().body(ResponseBody.create(HumanSecurity.INSTANCE.getBD().errorBody(HSBotDefenderErrorType.REQUEST_WAS_BLOCKED), MediaType.parse(\"application\/json\"))).build();","                }","            }","        }","        return response;","    }","}"]},{"syntax":"java","type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import android.util.Log;","import okhttp3.OkHttpClient;","import okhttp3.Request;","import okhttp3.Response;","import okhttp3.ResponseBody;","","public class MyHttpClient {","","    private final OkHttpClient httpClient = new OkHttpClient.Builder()","            .addInterceptor(new BotDefenderInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","            .build();","","    void sendRequest(String url) {","        Runnable r = () -> {","            try {","                Request request = new Request.Builder().url(url).build();","                Response response = httpClient.newCall(request).execute();","                ResponseBody responseBody = response.body();","                String responseString = null;","                if (responseBody != null) {","                    responseString = responseBody.string();","                    response.close();","                }","                if (!response.isSuccessful() && responseString != null) {","                    switch (HumanSecurity.INSTANCE.getBD().errorType(responseString)) {","                        case REQUEST_WAS_BLOCKED:","                            Log.i(\"MyHttpClient\", \"Request was blocked\");","                            break;","                    }","                }","            }","            catch (Exception exception) {","                Log.i(\"MyHttpClient\", \"Request was failed. Exception: \" + exception);","            }","        };","        new Thread(r).start();","    }","}"]},{"level":4,"type":"heading","anchor":"iOS","text":"iOS"},{"inlineContent":[{"text":"Using ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","type":"codeListing","code":["import HUMAN","","class MyHttpClient {","    ","    func sendUrlRequest(url: URL) {","        var request = URLRequest(url: url)","        let myHttpHeaders = [String : String]()","","        \/\/ config your request and HTTP headers...","","        let humanHttpHeaders = HumanSecurity.BD.headersForURLRequest(forAppId: \"<APP_ID>\")","        request.allHTTPHeaderFields = myHttpHeaders.merging(humanHttpHeaders) { $1 }","","        let dataTask = URLSession.shared.dataTask(with: request) { data, response, error in","            if let data = data, let response = response as? HTTPURLResponse {","                let isHandled = HumanSecurity.BD.handleResponse(response: response, data: data) { result in","                    print(\"Challenge result = \\(result)\")","                }","                if isHandled {","                    print(\"Blocked response was handled by the SDK\")","                }","            }","        }","        dataTask.resume()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"syntax":"objc","type":"codeListing","code":["@import HUMAN;","","@implementation MyHttpClient","","- (void)sendUrlRequest:(NSURL *)url {","    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];","    NSMutableDictionary<NSString *, NSString *> *myHttpHeaders = [[NSMutableDictionary alloc] init];","","    \/\/ config your request and HTTP headers...","","    NSDictionary<NSString *, NSString *> *humanHttpHeaders = [HumanSecurity.BD headersForURLRequestForAppId:@\"APP_ID\"];","    NSMutableDictionary<NSString *, NSString *> *allHTTPHeaderFields = [[NSMutableDictionary alloc] init];","    [allHTTPHeaderFields addEntriesFromDictionary:myHttpHeaders];","    [allHTTPHeaderFields addEntriesFromDictionary:humanHttpHeaders];","    request.allHTTPHeaderFields = allHTTPHeaderFields;","","    NSURLSessionDataTask *dataTask = [NSURLSession.sharedSession dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {","        BOOL isHandled = [HumanSecurity.BD handleResponseWithResponse:response data:data callback:^(enum HSBotDefenderChallengeResult result) {","            NSLog(@\"Challenge result = %ld\", result);","        }];","        if (isHandled) {","            NSLog(@\"Blocked response was handled by the SDK\");","        }","    }];","    [dataTask resume];","}","","@end"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"identifier":"https:\/\/github.com\/Alamofire\/Alamofire","type":"reference","isActive":true},{"text":":","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"code":["import Alamofire","import HUMAN","","class MyHttpClient {","    ","    func sendUrlRequest(url: URL) {","        var myHttpHeaders = [String : String]()","","        \/\/ config your HTTP headers...","","        let humanHttpHeaders = HumanSecurity.BD.headersForURLRequest(forAppId: \"<APP_ID>\")","        let allHTTPHeaderFields = myHttpHeaders.merging(humanHttpHeaders) { $1 }","        ","        AF.request(url, headers: HTTPHeaders(allHTTPHeaderFields)).response { response in","            if let data = response.data, let response = response.response {","                let isHandled = HumanSecurity.BD.handleResponse(response: response, data: data) { result in","                    print(\"Challenge result = \\(result)\")","                }","                if isHandled {","                    print(\"Blocked response was handled by the SDK\")","                }","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Let’s talk about what we have in the code here:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We get the SDK’s HTTP headers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We add those HTTP headers to our URL requests."}]}]},{"content":[{"inlineContent":[{"text":"We send the URL request.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"We send the response to the SDK. The SDK will check if it’s a blocked request. If yes, it will present a challenge to the user."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"We print the challenge result (solved\/cancelled) in the completion handler."}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"heading","anchor":"What-should-I-do-when-a-request-is-blocked","text":"What should I do when a request is blocked","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Handle it as a failure.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Your app should handle the blocked request as a failure. However, you should consider that your app’s UI will be shown again after the challenge was solved\/cancelled by the user. If the request was triggered by a user’s action, you should make it clear that the user may try again the same action.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the handler callback to write analytics, logs, etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You may use the handler callback to retry the original request When appropriate. You should consider the following:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The callback is called out of the original request’s scope. Meaning, you will need to ensure your app handles this case correctly."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The challenge could be canceled by the user. In this case, you should not retry the request because it will be blocked again."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible that the retry attempt will be blocked as well. DO NOT assume that it will go through."}]}]}],"type":"orderedList"}]}]},{"text":"Understanding the block response","level":3,"anchor":"Understanding-the-block-response","type":"heading"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The HUMAN’s Enforcer, when it decides to block a request, returns a JSON string in the response’s body. The HTTP status code is 403. Here is an example of the response:","type":"text"}]},{"code":["{","  \"vid\": \"928d7ab3-9cf1-11ee-a624-b802520f369f\",","  \"uuid\": \"fd01e6d6-9cf2-11ee-808c-acde48001122\",","  \"page\": \"PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPHRpdGxlPkFjY2VzcyB0byB0aGlzIHBhZ2UgaGFzIGJlZW4gZGVuaWVkLjwvdGl0bGU+CiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zOjMwMCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIDxzdHlsZT4KICAgICAgICBodG1sLCBib2R5IHsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICBmb250LWZhbWlseTogJ09wZW4gU2FucycsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGNvbG9yOiAjMDAwOwogICAgICAgIH0KCiAgICAgICAgYSB7CiAgICAgICAgICAgIGNvbG9yOiAjYzVjNWM1OwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgfQoKICAgICAgICAuY29udGFpbmVyIHsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleDogMTsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgfQoKICAgICAgICAuY29udGFpbmVyID4gZGl2IHsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIH0KCiAgICAgICAgLmNvbnRhaW5lciA+IGRpdiA+IGRpdiB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIHdpZHRoOiA4MCU7CiAgICAgICAgfQoKICAgICAgICAuY3VzdG9tZXItbG9nby13cmFwcGVyIHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDJyZW07CiAgICAgICAgICAgIGZsZXgtZ3JvdzogMDsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuOwogICAgICAgIH0KCiAgICAgICAgLmN1c3RvbWVyLWxvZ28gewogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDsKICAgICAgICB9CgogICAgICAgIC5jdXN0b21lci1sb2dvID4gaW1nIHsKICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDFyZW07CiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDUwcHg7CiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTsKICAgICAgICB9CgogICAgICAgIC5wYWdlLXRpdGxlLXdyYXBwZXIgewogICAgICAgICAgICBmbGV4LWdyb3c6IDI7CiAgICAgICAgfQoKICAgICAgICAucGFnZS10aXRsZSB7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTsKICAgICAgICB9CgogICAgICAgIC5jb250ZW50LXdyYXBwZXIgewogICAgICAgICAgICBmbGV4LWdyb3c6IDU7CiAgICAgICAgfQoKICAgICAgICAuY29udGVudCB7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgfQoKICAgICAgICAucGFnZS1mb290ZXItd3JhcHBlciB7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGZsZXgtZ3JvdzogMC4yOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwOwogICAgICAgICAgICBjb2xvcjogI2M1YzVjNTsKICAgICAgICAgICAgZm9udC1zaXplOiA3MCU7CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHsKICAgICAgICAgICAgaHRtbCwgYm9keSB7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICA8L3N0eWxlPgogICAgPCEtLSBDdXN0b20gQ1NTIC0tPgo8L2hlYWQ+Cgo8Ym9keT4KPHNlY3Rpb24gY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJjdXN0b21lci1sb2dvLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImN1c3RvbWVyLWxvZ28iPgogICAgICAgICAgICA8aW1nIHNyYz0iIiBhbHQ9IkxvZ28iLz4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icGFnZS10aXRsZS13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJwYWdlLXRpdGxlIj4KICAgICAgICAgICAgPGgxPlBsZWFzZSB2ZXJpZnkgeW91IGFyZSBhIGh1bWFuPC9oMT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29udGVudC13cmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBpZD0icHgtY2FwdGNoYSI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIEFjY2VzcyB0byB0aGlzIHBhZ2UgaGFzIGJlZW4gZGVuaWVkIGJlY2F1c2Ugd2UgYmVsaWV2ZSB5b3UgYXJlIHVzaW5nIGF1dG9tYXRpb24gdG9vbHMgdG8gYnJvd3NlIHRoZQogICAgICAgICAgICAgICAgd2Vic2l0ZS4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIFRoaXMgbWF5IGhhcHBlbiBhcyBhIHJlc3VsdCBvZiB0aGUgZm9sbG93aW5nOgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICBKYXZhc2NyaXB0IGlzIGRpc2FibGVkIG9yIGJsb2NrZWQgYnkgYW4gZXh0ZW5zaW9uIChhZCBibG9ja2VycyBmb3IgZXhhbXBsZSkKICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY29va2llcwogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICBQbGVhc2UgbWFrZSBzdXJlIHRoYXQgSmF2YXNjcmlwdCBhbmQgY29va2llcyBhcmUgZW5hYmxlZCBvbiB5b3VyIGJyb3dzZXIgYW5kIHRoYXQgeW91IGFyZSBub3QgYmxvY2tpbmcKICAgICAgICAgICAgICAgIHRoZW0gZnJvbSBsb2FkaW5nLgogICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgUmVmZXJlbmNlIElEOiAjZmQwMWU2ZDYtOWNmMi0xMWVlLTgwOGMtYWNkZTQ4MDAxMTIyCiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icGFnZS1mb290ZXItd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFnZS1mb290ZXIiPgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIFBvd2VyZWQgYnkKICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnBlcmltZXRlcnguY29tL3doeXdhc2libG9ja2VkIj5QZXJpbWV0ZXJYPC9hPgogICAgICAgICAgICAgICAgLCBJbmMuCiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CjwhLS0gUHggLS0+CjxzY3JpcHQ+CiAgICB3aW5kb3cuX3B4QXBwSWQgPSAnUFhqOXk0UThFbSc7CiAgICB3aW5kb3cuX3B4SnNDbGllbnRTcmMgPSAnLy9jbGllbnQucGVyaW1ldGVyeC5uZXQvUFhqOXk0UThFbS9tYWluLm1pbi5qcyc7CiAgICB3aW5kb3cuX3B4Rmlyc3RQYXJ0eUVuYWJsZWQgPSBmYWxzZTsKICAgIHdpbmRvdy5fcHhWaWQgPSAnOTI4ZDdhYjMtOWNmMS0xMWVlLWE2MjQtYjgwMjUyMGYzNjlmJzsKICAgIHdpbmRvdy5fcHhVdWlkID0gJ2ZkMDFlNmQ2LTljZjItMTFlZS04MDhjLWFjZGU0ODAwMTEyMic7CiAgICB3aW5kb3cuX3B4SG9zdFVybCA9ICcvL2NvbGxlY3Rvci1QWGo5eTRROEVtLnBlcmltZXRlcngubmV0JzsKPC9zY3JpcHQ+CjwhLS0gQ2FwdGNoYSAtLT4KPHNjcmlwdD4KICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICBzLnNyYyA9ICcvL2NhcHRjaGEucGVyaW1ldGVyeC5uZXQvUFhqOXk0UThFbS9jYXB0Y2hhLmpzP2E9YyZtPTEmdT1mZDAxZTZkNi05Y2YyLTExZWUtODA4Yy1hY2RlNDgwMDExMjImdj05MjhkN2FiMy05Y2YxLTExZWUtYTYyNC1iODAyNTIwZjM2OWYnOwogICAgdmFyIHAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgcC5pbnNlcnRCZWZvcmUocywgbnVsbCk7CiAgICBpZiAoZmFsc2UpIHsKICAgICAgICBzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgdmFyIHN1ZmZpeEluZGV4ID0gJy8vY2FwdGNoYS5wZXJpbWV0ZXJ4Lm5ldC9QWGo5eTRROEVtL2NhcHRjaGEuanM\/YT1jJm09MSZ1PWZkMDFlNmQ2LTljZjItMTFlZS04MDhjLWFjZGU0ODAwMTEyMiZ2PTkyOGQ3YWIzLTljZjEtMTFlZS1hNjI0LWI4MDI1MjBmMzY5ZicuaW5kZXhPZignY2FwdGNoYS5qcycpOwogICAgICAgICAgICB2YXIgdGVtcGVyZWRCbG9ja1NjcmlwdCA9ICcvL2NhcHRjaGEucGVyaW1ldGVyeC5uZXQvUFhqOXk0UThFbS9jYXB0Y2hhLmpzP2E9YyZtPTEmdT1mZDAxZTZkNi05Y2YyLTExZWUtODA4Yy1hY2RlNDgwMDExMjImdj05MjhkN2FiMy05Y2YxLTExZWUtYTYyNC1iODAyNTIwZjM2OWYnLnN1YnN0cmluZyhzdWZmaXhJbmRleCk7CiAgICAgICAgICAgIHMuc3JjID0gJy8vY2FwdGNoYS5weC1jZG4ubmV0L1BYajl5NFE4RW0vJyArIHRlbXBlcmVkQmxvY2tTY3JpcHQ7CiAgICAgICAgICAgIHAucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocywgcCk7CiAgICAgICAgfTsKICAgIH0KPC9zY3JpcHQ+CjwhLS0gQ3VzdG9tIFNjcmlwdCAtLT4KPC9ib2R5Pgo8L2h0bWw+Cg==\",","  \"appId\": \"PXj9y4Q8Em\",","  \"action\": \"captcha\",","  \"collectorUrl\": \"https:\/\/collector-pxj9y4q8em.perimeterx.net\"","}"],"type":"codeListing","syntax":"json"}]},{"content":[{"inlineContent":[{"text":"The JSON contains metadata for the SDK.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Your app should pass the whole JSON to the SDK via the ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSBotDefender\/handleResponse(response:data:callback:)","isActive":true,"type":"reference"},{"type":"text","text":" function. Otherwise, the SDK won’t present a challenge to the user."}]}]}]},{"level":3,"anchor":"How-to-set-custom-parameters-for-Bot-Defender-optional","text":"How to set custom parameters for Bot Defender (optional)","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set custom parameters in order to configure HUMNAN’s backend with additional parameters."}]},{"type":"paragraph","inlineContent":[{"text":"Those parameters can be set with a dictionary (iOS) or an hash map (Android), with the key “","type":"text"},{"code":"custom_param[x]","type":"codeVoice"},{"text":"” where ","type":"text"},{"type":"codeVoice","code":"[x]"},{"type":"text","text":" is a number between "},{"code":"1-10","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should call the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSBotDefender\/setCustomParameters(parameters:forAppId:)","isActive":true,"type":"reference"},{"type":"text","text":" only after the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:policy:)"},{"type":"text","text":" function was already called."}]},{"inlineContent":[{"type":"text","text":"Here is an example of how it should be:"}],"type":"paragraph"},{"level":4,"text":"Android","anchor":"Android","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kotlin:"}]},{"syntax":"kotlin","type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun setCustomParametersForBotDefender() {","    try {","        val customParameters = HashMap<String, String>()","        customParameters[\"custom_param1\"] = \"hello\"","        customParameters[\"custom_param2\"] = \"world\"","        HumanSecurity.BD.setCustomParameters(customParameters, \"<APP_ID>\")","    }","    catch (exception: Exception) {","        println(\"Exception: ${exception.message}\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Java:"}]},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import java.util.HashMap;","import android.util.Log;","","void setCustomParametersForBotDefender() {","    try {","        HashMap<String, String> customParameters = new HashMap<>();","        customParameters.put(\"custom_param1\", \"hello\");","        customParameters.put(\"custom_param2\", \"world\");","        HumanSecurity.INSTANCE.getBD().setCustomParameters(customParameters, \"<APP_ID>\");","    }","    catch(Exception exception) {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"],"type":"codeListing","syntax":"java"},{"text":"iOS","level":4,"type":"heading","anchor":"iOS"},{"inlineContent":[{"text":"Swift:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import HUMAN","","func setCustomParametersForBotDefender() {","    do {","        var customParameters = [String: String]()","        customParameters[\"custom_param1\"] = \"hello\"","        customParameters[\"custom_param2\"] = \"world\"","        try HumanSecurity.BD.setCustomParameters(parameters: customParameters, forAppId: \"<APP_ID>\")","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"type":"codeListing","syntax":"objc","code":["@import HUMAN;","","- (void)setCustomParametersForBotDefender {","    NSMutableDictionary<NSString *, NSString *> *customParameters = [[NSMutableDictionary<NSString *, NSString *> alloc] init];","    customParameters[@\"custom_param1\"] = @\"hello\";","    customParameters[@\"custom_param2\"] = @\"world\";","    NSError *error = nil;","    [HumanSecurity.BD setCustomParametersWithParameters:customParameters forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"]},{"text":"Account Defender integration","type":"heading","level":2,"anchor":"Account-Defender-integration"},{"level":3,"type":"heading","text":"How to enable Account Defender in your app?","anchor":"How-to-enable-Account-Defender-in-your-app"},{"inlineContent":[{"type":"text","text":"In order to enable Account Defender, you should set the "},{"type":"codeVoice","code":"UserID"},{"text":" of your current logged-in user in the SDK.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here is an example of how it should be:","type":"text"}]},{"type":"heading","text":"Android","anchor":"Android","level":4},{"type":"paragraph","inlineContent":[{"text":"Kotlin:","type":"text"}]},{"type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun onUserLoggedIn(userID: String) {","    try {","        HumanSecurity.AD.setUserId(userID, \"<APP_ID>\")","    }","    catch (exception: Exception) {","        println(\"Exception: ${exception.message}\")","    }","}"],"syntax":"kotlin"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Java:"}]},{"syntax":"java","type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import android.util.Log;","","void onUserLoggedIn(String userID) {","    try {","        HumanSecurity.INSTANCE.getAD().setUserId(userID, \"<APP_ID>\");","    }","    catch(Exception exception) {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"]},{"text":"iOS","anchor":"iOS","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"code":["import HUMAN","","func onUserLoggedIn(userID: String) {","    do {","        try HumanSecurity.AD.setUserId(userId: userID, forAppId: \"<APP_ID>\")","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"type":"codeListing","code":["@import HUMAN;","","- (void)onUserLoggedIn:(NSString *)userID {","    NSError *error = nil;","    [HumanSecurity.AD setUserIdWithUserId:userID forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"syntax":"objc"},{"level":3,"type":"heading","text":"How to notify HUMAN’s backend on outgoing URL requests from the app","anchor":"How-to-notify-HUMANs-backend-on-outgoing-URL-requests-from-the-app"},{"type":"paragraph","inlineContent":[{"text":"In order to allow Account Defender protect the user’s account, your app has to provide the SDK with outgoing URL requests.","type":"text"}]},{"anchor":"Android","type":"heading","text":"Android","level":4},{"inlineContent":[{"type":"text","text":"In this code example we assume your app uses "},{"type":"reference","overridingTitle":"OkHttp","identifier":"https:\/\/square.github.io\/okhttp\/","overridingTitleInlineContent":[{"type":"text","text":"OkHttp"}],"isActive":true},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/ktor.io\/","overridingTitle":"ktor","overridingTitleInlineContent":[{"type":"text","text":"ktor"}]},{"text":". We recommend to create a custom ","type":"text"},{"overridingTitleInlineContent":[{"text":"interceptor","type":"text"}],"identifier":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","isActive":true,"overridingTitle":"interceptor","type":"reference"},{"type":"text","text":" for this task. However, you may use any HTTP client of your choice and implement the same logic."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kotlin:"}]},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity","import okhttp3.Interceptor","import okhttp3.Response","","class AccountDefenderInterceptor: Interceptor {","","    override fun intercept(chain: Interceptor.Chain): Response {","        val request = chain.request()","        try {","            HumanSecurity.AD.registerOutgoingUrlRequest(request.url.toString(), \"<APP_ID>\")","        } ","        catch (exception: Exception) {","            println(\"Exception: ${exception.message}\")","        }","        return chain.proceed(request)","    }","}"],"type":"codeListing","syntax":"kotlin"},{"type":"paragraph","inlineContent":[{"text":"Kotlin (OkHttp):","type":"text"}]},{"code":["import okhttp3.OkHttpClient","import okhttp3.Request","","class MyHttpClient {","","    private val okHttpClient: OkHttpClient = OkHttpClient.Builder()","        .addInterceptor(AccountDefenderInterceptor())","        .build()","","    fun sendRequest(url: String) {","        try {","            val request: Request = Request.Builder().url(url).build()","            okHttpClient.newCall(request).execute().use { response ->","                \/\/ Handle the response...","            }","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"],"type":"codeListing","syntax":"kotlin"},{"type":"paragraph","inlineContent":[{"text":"Kotlin (ktor):","type":"text"}]},{"syntax":"kotlin","type":"codeListing","code":["import io.ktor.client.*","import io.ktor.client.engine.okhttp.*","import io.ktor.client.request.*","import io.ktor.client.statement.*","","class MyHttpClient {","","    private val httpClient: HttpClient = HttpClient(OkHttp) {","        engine {","            addInterceptor(AccountDefenderInterceptor())","        }","    }","","    suspend fun sendRequest(url: String) {","        try {","            val response: HttpResponse = httpClient.request(url) {}","            \/\/ Handle the response...","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"]},{"inlineContent":[{"text":"Java:","type":"text"}],"type":"paragraph"},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import android.util.Log;","import java.io.IOException;","import okhttp3.Interceptor;","import okhttp3.Request;","import okhttp3.Response;","","public class AccountDefenderInterceptor implements Interceptor {","","    @Override","    public Response intercept(Chain chain) throws IOException {","        Request request = chain.request();","        try {","            HumanSecurity.INSTANCE.getAD().registerOutgoingUrlRequest(request.url().toString(), \"<APP_ID>\");","        } catch (Exception exception) {","            Log.i(\"AccountDefenderInterceptor\", \"Exception: \" + exception.getMessage());","        }","        return chain.proceed(request);","    }","}"],"type":"codeListing","syntax":"java"},{"syntax":"java","type":"codeListing","code":["import android.util.Log;","import okhttp3.OkHttpClient;","import okhttp3.Request;","import okhttp3.Response;","","public class MyHttpClient {","","    private final OkHttpClient httpClient = new OkHttpClient.Builder()","            .addInterceptor(new AccountDefenderInterceptor())","            .build();","","    void sendRequest(String url) {","        Runnable r = () -> {","            try {","                Request request = new Request.Builder().url(url).build();","                Response response = httpClient.newCall(request).execute();","                \/\/ Handle the response...","            }","            catch (Exception exception) {","                Log.i(\"MyHttpClient\", \"Request was failed. Exception: \" + exception);","            }","        };","        new Thread(r).start();","    }","}"]},{"type":"heading","text":"iOS","level":4,"anchor":"iOS"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"type":"codeListing","syntax":"swift","code":["import HUMAN","","class MyHttpClient {","    ","    func sendUrlRequest(url: URL) {","        do {","            try HumanSecurity.AD.registerOutgoingUrlRequest(url: url.absoluteString, forAppId: \"<APP_ID>\")","        }","        catch {","            print(\"Error: \\(error)\")","        }","        ","        \/\/ Send the request...","    }","}"]},{"inlineContent":[{"type":"text","text":"Objective-C:"}],"type":"paragraph"},{"syntax":"objc","type":"codeListing","code":["@import HUMAN;","","@implementation MyHttpClient","","- (void)sendUrlRequest:(NSURL *)url {","    NSError *error = nil;","    [HumanSecurity.AD registerOutgoingUrlRequestWithUrl:url.absoluteString forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"error: %@\", error);","    }","","    \/\/ send the request...","}","","@end"]},{"type":"paragraph","inlineContent":[{"text":"Let’s talk about what we have in the code here:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We call the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAccountDefender\/registerOutgoingUrlRequest(url:forAppId:)","isActive":true},{"type":"text","text":" function before we send the URL request."}]}]}],"type":"orderedList"},{"level":3,"text":"How to set additional data (optional)","anchor":"How-to-set-additional-data-optional","type":"heading"},{"inlineContent":[{"type":"text","text":"You can set additional data in order to configure HUMNAN’s backend with additional parameters."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Those parameters can be set with a dictionary (iOS) or an hash map (Android)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should call the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAccountDefender\/setAdditionalData(parameters:forAppId:)"},{"type":"text","text":" only after the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:policy:)","type":"reference","isActive":true},{"type":"text","text":" function was already called."}]},{"inlineContent":[{"type":"text","text":"Here is an example of how it should be:"}],"type":"paragraph"},{"text":"Android","anchor":"Android","type":"heading","level":4},{"inlineContent":[{"text":"Kotlin:","type":"text"}],"type":"paragraph"},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun setAdditionalDataForAccountDefender() {","    try {","        val additionalData = HashMap<String, String>()","        additionalData[\"my_key1\"] = \"hello\"","        additionalData[\"my_key2\"] = \"world\"","        HumanSecurity.AD.setAdditionalData(additionalData, \"<APP_ID>\")","    }","    catch (exception: Exception) {","       println(\"Exception: ${exception.message}\")","    }","}"],"syntax":"kotlin","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Java:"}],"type":"paragraph"},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import java.util.HashMap;","import android.util.Log;","","void setAdditionalDataForAccountDefender() {","    try {","        HashMap<String, String> additionalData = new HashMap<>();","        additionalData.put(\"my_key1\", \"hello\");","        additionalData.put(\"my_key2\", \"world\");","        HumanSecurity.INSTANCE.getAD().setAdditionalData(additionalData, \"<APP_ID>\");","    }","    catch(Exception exception) {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"],"type":"codeListing","syntax":"java"},{"type":"heading","level":4,"text":"iOS","anchor":"iOS"},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"code":["import HUMAN","","func setAdditionalDataForAccountDefender() {","    do {","        var additionalData = [String: String]()","        additionalData[\"my_key1\"] = \"hello\"","        additionalData[\"my_key2\"] = \"world\"","        try HumanSecurity.AD.setAdditionalData(parameters: additionalData, forAppId: \"<APP_ID>\")","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"code":["@import HUMAN;","","- (void)setAdditionalDataForAccountDefender {","    NSMutableDictionary<NSString *, NSString *> *additionalData = [[NSMutableDictionary<NSString *, NSString *> alloc] init];","    additionalData[@\"my_key1\"] = @\"hello\";","    additionalData[@\"my_key2\"] = @\"world\";","    NSError *error = nil;","    [HumanSecurity.AD setAdditionalDataWithParameters:additionalData forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"syntax":"objc","type":"codeListing"}],"kind":"content"}],"kind":"article","references":{"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/start(appIds:policy:)":{"navigatorTitle":[{"kind":"identifier","text":"startWithAppIds:policy:error:"}],"abstract":[{"type":"text","text":"Start the SDK."}],"kind":"symbol","title":"start(appIds:policy:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"kind":"text","text":"("},{"text":"appIds","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"policy","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@HUMAN@objc(cs)HSPolicy","text":"HSPolicy"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"type":"topic","role":"symbol","url":"\/documentation\/human\/humansecurity\/start(appids:policy:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appIds:policy:)"},"#how-to-start-the-sdk":{"type":"link","identifier":"#how-to-start-the-sdk","title":"How to start the SDK","titleInlineContent":[{"text":"How to start the SDK","type":"text"}],"url":"#how-to-start-the-sdk"},"https://developer.apple.com/documentation/foundation/urlsession":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession","title":"URLSession","titleInlineContent":[{"code":"URLSession","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/start(appId:policy:)":{"title":"start(appId:policy:)","abstract":[{"text":"Start the SDK.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"startWithAppId:policy:error:"}],"role":"symbol","url":"\/documentation\/human\/humansecurity\/start(appid:policy:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:policy:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"appId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"policy","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"c:@M@HUMAN@objc(cs)HSPolicy","text":"HSPolicy","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSBotDefender/setCustomParameters(parameters:forAppId:)":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSBotDefender\/setCustomParameters(parameters:forAppId:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setCustomParameters"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"parameters"},{"kind":"text","text":": ["},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"forAppId"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"setCustomParametersWithParameters:forAppId:error:","kind":"identifier"}],"abstract":[{"type":"text","text":"Set custom parameters for given AppID."}],"title":"setCustomParameters(parameters:forAppId:)","url":"\/documentation\/human\/hsbotdefender\/setcustomparameters(parameters:forappid:)","type":"topic"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN":{"kind":"symbol","role":"collection","title":"HUMAN","url":"\/documentation\/human","abstract":[{"type":"image","identifier":"HUMAN_logo.png"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN"},"https://ktor.io/":{"type":"link","identifier":"https:\/\/ktor.io\/","title":"ktor","titleInlineContent":[{"text":"ktor","type":"text"}],"url":"https:\/\/ktor.io\/"},"#bot-defender-integration":{"type":"link","identifier":"#bot-defender-integration","title":"Bot Defender integration","titleInlineContent":[{"text":"Bot Defender integration","type":"text"}],"url":"#bot-defender-integration"},"https://github.com/Alamofire/Alamofire":{"type":"link","identifier":"https:\/\/github.com\/Alamofire\/Alamofire","title":"Alamofire","titleInlineContent":[{"code":"Alamofire","type":"codeVoice"}],"url":"https:\/\/github.com\/Alamofire\/Alamofire"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAccountDefender/setAdditionalData(parameters:forAppId:)":{"abstract":[{"text":"Set additional data that support Account Defender for given AppID.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAccountDefender\/setAdditionalData(parameters:forAppId:)","role":"symbol","url":"\/documentation\/human\/hsaccountdefender\/setadditionaldata(parameters:forappid:)","title":"setAdditionalData(parameters:forAppId:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setAdditionalData","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"parameters"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"forAppId","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"}],"navigatorTitle":[{"text":"setAdditionalDataWithParameters:forAppId:error:","kind":"identifier"}]},"https://square.github.io/okhttp/":{"type":"link","identifier":"https:\/\/square.github.io\/okhttp\/","title":"OkHttp","titleInlineContent":[{"text":"OkHttp","type":"text"}],"url":"https:\/\/square.github.io\/okhttp\/"},"#account-defender-integration":{"type":"link","identifier":"#account-defender-integration","title":"Account Defender integration","titleInlineContent":[{"text":"Account Defender integration","type":"text"}],"url":"#account-defender-integration"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSBotDefender/handleResponse(response:data:callback:)":{"kind":"symbol","abstract":[{"text":"This function handles the URL request’s response and presents the block screen, if necessary.","type":"text"}],"title":"handleResponse(response:data:callback:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"handleResponse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"response","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"URLResponse","preciseIdentifier":"c:objc(cs)NSURLResponse"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV","text":"Data"},{"kind":"text","text":", "},{"text":"callback","kind":"externalParam"},{"kind":"text","text":": (("},{"preciseIdentifier":"c:@M@HUMAN@E@HSBotDefenderChallengeResult","text":"HSBotDefenderChallengeResult","kind":"typeIdentifier"},{"kind":"text","text":") -> ())?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/human\/hsbotdefender\/handleresponse(response:data:callback:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSBotDefender\/handleResponse(response:data:callback:)","navigatorTitle":[{"text":"handleResponseWithResponse:data:callback:","kind":"identifier"}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAccountDefender/registerOutgoingUrlRequest(url:forAppId:)":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/human\/hsaccountdefender\/registeroutgoingurlrequest(url:forappid:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAccountDefender\/registerOutgoingUrlRequest(url:forAppId:)","title":"registerOutgoingUrlRequest(url:forAppId:)","abstract":[{"type":"text","text":"Provide outgoing URL request to the Account Defender feature."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"registerOutgoingUrlRequest","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"url"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"forAppId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"}],"navigatorTitle":[{"kind":"identifier","text":"registerOutgoingUrlRequestWithUrl:forAppId:error:"}]},"https://square.github.io/okhttp/features/interceptors/":{"type":"link","identifier":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","title":"interceptor","titleInlineContent":[{"text":"interceptor","type":"text"}],"url":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/"}},"variantOverrides":[{"patch":[{"value":"occ","op":"replace","path":"\/identifier\/interfaceLanguage"},{"op":"add","path":"\/topicSections","value":null},{"path":"\/seeAlsoSections","value":null,"op":"add"},{"op":"replace","value":"startWithAppIds:policy:error:","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appIds:policy:)\/title"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appIds:policy:)\/fragments","op":"replace","value":[{"text":"+ ","kind":"text"},{"text":"startWithAppIds:policy:error:","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appId:policy:)\/title","op":"replace","value":"startWithAppId:policy:error:"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appId:policy:)\/fragments","value":[{"text":"+ ","kind":"text"},{"text":"startWithAppId:policy:error:","kind":"identifier"}]},{"op":"replace","value":"setCustomParametersWithParameters:forAppId:error:","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSBotDefender~1setCustomParameters(parameters:forAppId:)\/title"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSBotDefender~1setCustomParameters(parameters:forAppId:)\/fragments","value":[{"kind":"text","text":"- "},{"text":"setCustomParametersWithParameters:forAppId:error:","kind":"identifier"}],"op":"replace"},{"value":"setAdditionalDataWithParameters:forAppId:error:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAccountDefender~1setAdditionalData(parameters:forAppId:)\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAccountDefender~1setAdditionalData(parameters:forAppId:)\/fragments","value":[{"text":"- ","kind":"text"},{"text":"setAdditionalDataWithParameters:forAppId:error:","kind":"identifier"}]},{"value":"handleResponseWithResponse:data:callback:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSBotDefender~1handleResponse(response:data:callback:)\/title"},{"op":"replace","value":[{"text":"- ","kind":"text"},{"text":"handleResponseWithResponse:data:callback:","kind":"identifier"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSBotDefender~1handleResponse(response:data:callback:)\/fragments"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAccountDefender~1registerOutgoingUrlRequest(url:forAppId:)\/title","value":"registerOutgoingUrlRequestWithUrl:forAppId:error:","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAccountDefender~1registerOutgoingUrlRequest(url:forAppId:)\/fragments","value":[{"text":"- ","kind":"text"},{"kind":"identifier","text":"registerOutgoingUrlRequestWithUrl:forAppId:error:"}]}],"traits":[{"interfaceLanguage":"occ"}]}]}