{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"HUMAN"}],"title":"Native - Advanced Functionality"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Introduction","anchor":"Introduction","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"In this article we will learn how integrate the SDK to your native iOS\/Android app.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Highlights:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle blocked requests "},{"inlineContent":[{"text":"with the challenge result","type":"text"}],"type":"strong"},{"text":" (solved\/cancelled).","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Great for analyitics, logs, etc.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Great for sending the URL request again.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Option to retry the blocked request automaticlly after the challenge was solved."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The SDK intercpts your URL requests.","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note that the Android implementation requires that your app use "},{"type":"reference","isActive":true,"identifier":"https:\/\/square.github.io\/okhttp\/"},{"text":" which supports ","type":"text"},{"identifier":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","isActive":true,"type":"reference"}]},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note that the iOS implementation requires that your app use "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession"},{"type":"text","text":" or any 3rd party library that based on it"}]},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will cover the following topics:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#how-to-start-the-sdk","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#bot-defender-integration"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to add the SDK’s HTTP headers to your URL requests."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"How to present a challenge to the user.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"How to handle the challenge’s result."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to set custom parameters (optional)."}]}]}]}]},{"content":[{"inlineContent":[{"identifier":"#account-defender-integration","isActive":true,"type":"reference"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"How to enable it.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"How to notify HUMAN’s backend on outgoing URL requests from the app.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"How to set additional data (optional)."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"heading","anchor":"How-to-start-the-SDK","text":"How to start the SDK","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The most important thing is to start the SDK as soon as possible in your app flow. The reason is that when your app will send an URL request to your server before the SDK was started, then the request will not include the SDK’s HTTP headers. As a result, HUMAN’s Enforcer could block the request and the SDK will not be able to present a challenge to the user. The best place to start the SDK is in the:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Application"},{"text":"’s ","type":"text"},{"code":"onCreate","type":"codeVoice"},{"type":"text","text":" function on Android."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"AppDelegate","type":"codeVoice"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"didFinishLaunchingWithOptions"},{"type":"text","text":" function on iOS."}]}]}]}]},{"content":[{"inlineContent":[{"text":"You should start the SDK on the ","type":"text"},{"type":"strong","inlineContent":[{"text":"main thread","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The SDK is intercepting URL requests from your app. Your app should tell the SDK which domains are intercepted. Not specifying domains means that ALL domains will be intercepted. The SDK checks if the URL’s domain ends with one of the domains that were set. For example: If you set "},{"type":"codeVoice","code":"example.com"},{"text":" the SDK will also intercept calls to ","type":"text"},{"code":"www.example.com","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"api.example.com","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Here is how it should be:","type":"text"}]},{"text":"Android","level":3,"anchor":"Android","type":"heading"},{"inlineContent":[{"type":"text","text":"Kotlin:"}],"type":"paragraph"},{"type":"codeListing","syntax":"kotlin","code":["import android.app.Application","import com.humansecurity.mobile_sdk.HumanSecurity","import com.humansecurity.mobile_sdk.main.policy.HSPolicy","import com.humansecurity.mobile_sdk.main.policy.HSAutomaticInterceptorType","","class MainApplication: Application() {","","    override fun onCreate() {","        super.onCreate()","        startHumanSDK()","    }","","    private fun startHumanSDK() {","        try {","            val policy = HSPolicy()","            policy.automaticInterceptorPolicy.interceptorType = HSAutomaticInterceptorType.INTERCEPT_WITH_DELAYED_RESPONSE \/\/ or INTERCEPT_AND_RETRY_REQUEST","            policy.automaticInterceptorPolicy.setInterceptedDomains(setOf(\"example.com\"), \"<APP_ID>\")","","            HumanSecurity.start(this, \"<APP_ID>\", null, policy)","        }","        catch (exception: Exception) {","            println(\"Exception: ${exception.message}\")","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Java:"}]},{"syntax":"java","code":["import android.app.Application;","import android.util.Log;","import java.util.HashSet;","import com.humansecurity.mobile_sdk.HumanSecurity;","import com.humansecurity.mobile_sdk.main.policy.HSPolicy;","import com.humansecurity.mobile_sdk.main.policy.HSAutomaticInterceptorType;","","public class MainApplication extends Application {","","    @Override","    public void onCreate() {","        super.onCreate();","        startHumanSDK();","    }","","    void startHumanSDK() {","        try {","            HSPolicy policy = new HSPolicy();","            policy.getAutomaticInterceptorPolicy().setInterceptorType(HSAutomaticInterceptorType.INTERCEPT_WITH_DELAYED_RESPONSE); \/\/ or INTERCEPT_AND_RETRY_REQUEST","","            HashSet<String> domains = new HashSet<>();","            domains.add(\"example.com\");","            policy.getAutomaticInterceptorPolicy().setInterceptedDomains(domains, \"<APP_ID>\");","","            HumanSecurity.INSTANCE.start(this, \"<APP_ID>\", null, policy);","        }","        catch (Exception exception) {","            Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","        }","    }","}"],"type":"codeListing"},{"type":"heading","anchor":"iOS","text":"iOS","level":3},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"code":["import UIKit","import HUMAN","","class AppDelegate: UIResponder, UIApplicationDelegate {","","    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","        startHumanSDK()","        return true","    }","","    func startHumanSDK() {","        do {","            let policy = HSPolicy()","            policy.automaticInterceptorPolicy.interceptorType = .interceptWithDelayedResponse \/\/ or interceptAndRetryRequest","            policy.automaticInterceptorPolicy.set(interceptedDomains: [\"example.com\"], forAppId: \"<APP_ID>\")","            ","            try HumanSecurity.start(appId: \"<APP_ID>\", delegate: nil, policy: policy)","        }","        catch {","            print(\"Error: \\(error)\")","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Objective-C:"}]},{"type":"codeListing","code":["@import HUMAN;","","@implementation AppDelegate","","- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {","    [self startHumanSDK];","    return YES;","}","","- (void)startHumanSDK {","    HSPolicy *policy = [[HSPolicy alloc] init];","    policy.automaticInterceptorPolicy.interceptorType = HSAutomaticInterceptorTypeInterceptWithDelayedResponse; \/\/ or HSAutomaticInterceptorTypeInterceptAndRetryRequest","    [policy.automaticInterceptorPolicy setWithInterceptedDomains:[NSSet setWithObject:@\"example.com\"] forAppId:@\"<APP_ID>\"];","","    NSError *error = nil;","    [HumanSecurity startWithAppId:@\"<APP_ID>\" delegate:nil policy:policy error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"syntax":"objc"},{"inlineContent":[{"type":"text","text":"Let’s talk about what we have in the code here:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start the SDK as soon as possible and on the main thread."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"We create a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSPolicy"},{"type":"text","text":" instance. This object is used to configure the SDK’s behavior. Here, we set the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/intercept","isActive":true,"type":"reference"},{"type":"text","text":" property to "},{"type":"codeVoice","code":"interceptWithDelayedResponse"},{"type":"text","text":" (or "},{"type":"codeVoice","code":"interceptAndRetryRequest"},{"type":"text","text":"). This will turn on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Interception"}]},{"text":" feature of the SDK. In short, this feature allows the SDK to manipulate URL requests and handle their responses by itself. We also set our server’s domain. This will tell the SDK to intercept URL requests only for this domain.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"We call the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:delegate:policy:)"},{"text":" function of the SDK. We provide the following parameters:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance (Android only)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your AppID."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A delegate object which provide events from the SDK (optional)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The policy object that we configured.","type":"text"}]}]}],"type":"unorderedList"}]}]},{"inlineContent":[{"type":"text","text":"Note: In iOS, The Automatic Interception uses the "},{"type":"codeVoice","code":"URLSessionConfiguration.default"},{"type":"text","text":" to send your URL request. However, if your app uses a custom configuration, you should set your configuration in the policy - "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorPolicy\/urlSessionConfiguration","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: If your app communicates with several servers that have different AppID, you can call the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appIds:delegate:policy:)","isActive":true,"type":"reference"},{"type":"text","text":" function which allow you to pass an array of AppIDs. You should specify the relevant AppID for each API call in the SDK."}]},{"level":2,"text":"Bot Defender integration","type":"heading","anchor":"Bot-Defender-integration"},{"level":3,"text":"How to add the SDK’s HTTP headers to your URL requests and handle the blocked request","type":"heading","anchor":"How-to-add-the-SDKs-HTTP-headers-to-your-URL-requests-and-handle-the-blocked-request"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The SDK adds its HTTP headers to you URL requests automaticlly. There is no need to manually add those headers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The SDK handles the blocked request and presents a challenge to the user automaticlly.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The SDK provides a custom error response directly to your request handler. "},{"inlineContent":[{"text":"This error is provided after the challenge is solved or cancelled","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You should disable your URL request’s timeout. This is necessary because the HTTP client could trigger a timeout error before the user solved the challenge."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"[Android Only] You can use the SDK’s "},{"type":"codeVoice","code":"HSTimeoutInterceptor"},{"text":" to configure a timeout for your URL request. This interceptor will ensure the timeout for the URL request, while having infinite time for the user to solve\/cancel the challenge.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is how it should be:"}]},{"level":4,"anchor":"Android","type":"heading","text":"Android"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kotlin (OkHttp):"}]},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity","import com.humansecurity.mobile_sdk.main.HSInterceptor","import com.humansecurity.mobile_sdk.main.HSTimeoutInterceptor","import okhttp3.OkHttpClient","import okhttp3.Request","import java.util.concurrent.TimeUnit","","class MyHttpClient {","","    private val okHttpClient: OkHttpClient = OkHttpClient.Builder()","        .callTimeout(0, TimeUnit.SECONDS)","        .addInterceptor(HSTimeoutInterceptor(10_000, 10_000, 10_000))","        .addInterceptor(HSInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","        .build()","","    fun sendRequest(url: String) {","        try {","            val request: Request = Request.Builder().url(url).build()","            okHttpClient.newCall(request).execute().use { response ->","                if (!response.isSuccessful) {","                    response.body?.string()?.let { responseBody ->","                        if (HumanSecurity.isChallengeSolvedError(responseBody)) {","                            println(\"Request was blocked by the SDK and the user solved the challenge\")","                        }","                        if (HumanSecurity.isChallengeCancelledError(responseBody)) {","                            println(\"Request was blocked by the SDK and the user cancelled the challenge\")","                        }","                    }","                }","            }","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"],"syntax":"kotlin","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Kotlin (ktor):","type":"text"}]},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity","import com.humansecurity.mobile_sdk.main.HSInterceptor","import com.humansecurity.mobile_sdk.main.HSTimeoutInterceptor","import io.ktor.client.*","import io.ktor.client.call.body","import io.ktor.client.engine.okhttp.*","import io.ktor.client.plugins.HttpTimeout","import io.ktor.client.request.*","import io.ktor.client.statement.*","","class MyHttpClient {","","    private val httpClient: HttpClient = HttpClient(OkHttp) {","        install(HttpTimeout) {","            requestTimeoutMillis = HttpTimeout.INFINITE_TIMEOUT_MS","        }","        engine {","            addInterceptor(HSTimeoutInterceptor(10_000, 10_000, 10_000))","            addInterceptor(HSInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","        }","    }","","    suspend fun sendRequest(url: String) {","        try {","            val response: HttpResponse = httpClient.request(url) {}","            val responseBody = response.body<String>()","            if (HumanSecurity.isChallengeSolvedError(responseBody)) {","                println(\"Request was blocked by the SDK and the user solved the challenge\")","            }","            if (HumanSecurity.isChallengeCancelledError(responseBody)) {","                println(\"Request was blocked by the SDK and the user cancelled the challenge\")","            }","        } catch (exception: Exception) {","            println(\"Request was failed. Exception: $exception\")","        }","    }","}"],"type":"codeListing","syntax":"kotlin"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Java:"}]},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","import com.humansecurity.mobile_sdk.main.HSInterceptor;","import com.humansecurity.mobile_sdk.main.HSTimeoutInterceptor;","import android.util.Log;","import okhttp3.OkHttpClient;","import okhttp3.Request;","import okhttp3.Response;","import okhttp3.ResponseBody;","","public class MyHttpClient {","","    private final OkHttpClient httpClient = new OkHttpClient.Builder()","            .addInterceptor(new HSTimeoutInterceptor(10_000, 10_000, 10_000))","            .addInterceptor(new HSInterceptor()) \/\/ SHOULD BE THE LAST INTERCEPTOR","            .build();","","    void sendRequest(String url) {","        Runnable r = () -> {","            try {","                Request request = new Request.Builder().url(url).build();","                Response response = httpClient.newCall(request).execute();","                ResponseBody responseBody = response.body();","                String responseString = null;","                if (responseBody != null) {","                    responseString = responseBody.string();","                    response.close();","                }","","                if (!response.isSuccessful() && responseString != null) {","                    if (HumanSecurity.INSTANCE.isChallengeSolvedError(responseString)) {","                        Log.i(\"MyHttpClient\", \"Request was blocked by the SDK and the user solved the challenge\");","                    }","                    if (HumanSecurity.INSTANCE.isChallengeCancelledError(responseString)) {","                        Log.i(\"MyHttpClient\", \"Request was blocked by the SDK and the user cancelled the challenge\");","                    }","                }","            }","            catch (Exception exception) {","                Log.i(\"MyHttpClient\", \"Request was failed. Exception: \" + exception);","            }","        };","        new Thread(r).start();","    }","}"],"type":"codeListing","syntax":"java"},{"anchor":"iOS","level":4,"text":"iOS","type":"heading"},{"inlineContent":[{"type":"text","text":"Using "},{"overridingTitleInlineContent":[{"code":"URLSession","type":"codeVoice"}],"overridingTitle":"URLSession","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession","type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","code":["import HUMAN","","class MyHttpClient {","","    func sendUrlRequest(url: URL) {","        var request = URLRequest(url: url)","        request.timeoutInterval = 0","        ","        \/\/ Config your request...","","        let dataTask = URLSession.shared.dataTask(with: request) { data, response, error in","            if let data = data, let response = response as? HTTPURLResponse {","                if let error {","                    if HumanSecurity.isChallengeSolvedError(error: error) {","                        print(\"Request was blocked by the SDK and the user solved the challenge\")","                    }","                    if HumanSecurity.isChallengeCancelledError(error: error) {","                        print(\"Request was blocked by the SDK and the user cancelled the challenge\")","                    }","                }","            }","        }","        dataTask.resume()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"code":["@import HUMAN;","","@implementation MyHttpClient","","- (void)sendUrlRequest:(NSURL *)url {","    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];","    request.timeoutInterval = 0;","","    \/\/ Config your request...","","    NSURLSessionDataTask *dataTask = [NSURLSession.sharedSession dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {","        if (error != nil) {","            BOOL isChallengeSolvedError = [HumanSecurity isChallengeSolvedErrorWithError:error];","            if (isChallengeSolvedError) {","                NSLog(@\"Request was blocked by the SDK and the user solved the challenge\");","            }","            BOOL isChallengeCancelledError = [HumanSecurity isChallengeCancelledErrorWithError:error];","            if (isChallengeCancelledError) {","                NSLog(@\"Request was blocked by the SDK and the user cancelled the challenge\");","            }","        }","    }];","    [dataTask resume];","}","","@end"],"syntax":"objc","type":"codeListing"},{"inlineContent":[{"text":"Using ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/Alamofire\/Alamofire"},{"type":"text","text":":"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Alamofire","import HUMAN","","class MyHttpClient {","","    func sendUrlRequest(url: URL) {","        AF.request(url) { $0.timeoutInterval = 0 }.response { response in","            if let error = response.error?.underlyingError {","                if HumanSecurity.isChallengeSolvedError(error: error) {","                    print(\"Request was blocked by the SDK and the user solved the challenge\")","                }","                if HumanSecurity.isChallengeCancelledError(error: error) {","                    print(\"Request was blocked by the SDK and the user cancelled the challenge\")","                }","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Let’s talk about what we have in the code here:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We configure the HTTP client (Android) and the URL request (iOS) to be with infinite timeout.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"[Android only] We configure the HTTP client to have the "},{"type":"codeVoice","code":"HSTimeoutInterceptor"},{"type":"text","text":" with timeout of 10 seconds (for connect timeout, read timeout and write timeout)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"[Android only] We configure the HTTP client to have the ","type":"text"},{"code":"HSInterceptor","type":"codeVoice"},{"type":"text","text":". "},{"type":"strong","inlineContent":[{"text":"This interceptor must be the last interceptor in the list","type":"text"}]},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"We send the URL request."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"We check with the SDK if the error that was received is a “challenge solved error” or a “challenge cancelled error”.","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"You should note that when the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType"},{"text":" is set to ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/interceptAndRetryRequest","type":"reference","isActive":true},{"text":", the SDK will send the blocked request again after the challenge was solved (before your handler will be called). ","type":"text"},{"inlineContent":[{"text":"However, the second request could be blocked as well and in this case the SDK won’t send the request again","type":"text"}],"type":"strong"},{"type":"text","text":". Your code should handle the challenge result appropriately."}]},{"level":3,"text":"What should I do when a request is blocked","anchor":"What-should-I-do-when-a-request-is-blocked","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle it as a failure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your app should handle the blocked request as a failure. When the challenge was solved, you may send the request again. If the request was triggered by a user’s action, you should make it clear that the user may try again the same action."}]}]}]},{"type":"heading","text":"How to set custom parameters (optional)","anchor":"How-to-set-custom-parameters-optional","level":3},{"inlineContent":[{"type":"text","text":"You can set custom parameters in order to configure HUMNAN’s backend with additional parameters."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Those parameters can be set with a dictionary (iOS) or an hash map (Android), with the key “"},{"code":"custom_param[x]","type":"codeVoice"},{"type":"text","text":"” where "},{"code":"[x]","type":"codeVoice"},{"type":"text","text":" is a number between "},{"code":"1-10","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You should call the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/setCustomParameters(parameters:forAppId:)","isActive":true,"type":"reference"},{"type":"text","text":" only after the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:delegate:policy:)"},{"type":"text","text":" function was already called."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here is how it should be:"}],"type":"paragraph"},{"type":"heading","anchor":"Android","level":4,"text":"Android"},{"inlineContent":[{"text":"Kotlin:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"kotlin","code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun setCustomParametersForBotDefender() {","    try {","        val customParameters = HashMap<String, String>()","        customParameters[\"custom_param1\"] = \"hello\"","        customParameters[\"custom_param2\"] = \"world\"","        HumanSecurity.setCustomParameters(customParameters, \"<APP_ID>\")","    }","    catch (exception: Exception) {","        println(\"Exception: ${exception.message}\")","    }","}"]},{"inlineContent":[{"type":"text","text":"Java:"}],"type":"paragraph"},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","","void setCustomParametersForBotDefender() {","    try {","        HashMap<String, String> customParameters = new HashMap<>();","        customParameters.put(\"custom_param1\", \"hello\");","        customParameters.put(\"custom_param2\", \"world\");","        HumanSecurity.INSTANCE.setCustomParameters(customParameters, \"<APP_ID>\");","    }","    catch {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"],"type":"codeListing","syntax":"java"},{"text":"iOS","level":4,"type":"heading","anchor":"iOS"},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"code":["import HUMAN","","func setCustomParametersForBotDefender() {","    do {","        var customParameters = [String: String]()","        customParameters[\"custom_param1\"] = \"hello\"","        customParameters[\"custom_param2\"] = \"world\"","        try HumanSecurity.setCustomParameters(parameters: customParameters, forAppId: \"<APP_ID>\")","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Objective-C:"}]},{"code":["@import HUMAN;","","- (void)setCustomParametersForBotDefender {","    NSMutableDictionary<NSString *, NSString *> *customParameters = [[NSMutableDictionary<NSString *, NSString *> alloc] init];","    customParameters[@\"custom_param1\"] = @\"hello\";","    customParameters[@\"custom_param2\"] = @\"world\";","    error = nil;","    [HumanSecurity setCustomParametersWithParameters:customParameters forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"type":"codeListing","syntax":"objc"},{"type":"heading","anchor":"Account-Defender-integration","level":2,"text":"Account Defender integration"},{"level":3,"text":"How to enbale Account Defender in your app?","anchor":"How-to-enbale-Account-Defender-in-your-app","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to enable Account Defedner, you should set the "},{"code":"UserID","type":"codeVoice"},{"type":"text","text":" of your current logged-in user in the SDK."}]},{"inlineContent":[{"type":"text","text":"Here is how it should be:"}],"type":"paragraph"},{"text":"Android","level":4,"anchor":"Android","type":"heading"},{"inlineContent":[{"type":"text","text":"Kotlin:"}],"type":"paragraph"},{"syntax":"kotlin","code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun onUserLoggedIn(userID: String) {","    try {","        HumanSecurity.setUserId(userID, \"<APP_ID>\")","    }","    catch (exception: Exception) {","        println(\"Exception: ${exception.message}\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Java:"}],"type":"paragraph"},{"code":["import com.humansecurity.mobile_sdk.HumanSecurity;","","void onUserLoggedIn(String userID) {","    try {","        HumanSecurity.INSTANCE.setUserId(userID, \"<APP_ID>\");","    }","    catch {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"],"syntax":"java","type":"codeListing"},{"text":"iOS","type":"heading","level":4,"anchor":"iOS"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","type":"codeListing","code":["import HUMAN","","func onUserLoggedIn(userID: String) {","    do {","        try HumanSecurity.setUserId(userId: userID)","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"]},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"code":["@import HUMAN;","","- (void)onUserLoggedIn:(NSString *)userID {","    error = nil;","    [HumanSecurity setUserIdWithUserId:userID forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"type":"codeListing","syntax":"objc"},{"level":3,"text":"How to notify HUMAN’s backend on outgoing URL requests from the app","type":"heading","anchor":"How-to-notify-HUMANs-backend-on-outgoing-URL-requests-from-the-app"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to allow Account Defender protect the user’s account, your app has to provide the SDK with outgoing URL requests."}]},{"inlineContent":[{"text":"While the SDK’s interceptor is enabled, the SDK is collecting your outgoing URL requests automaticlly. There is no need to manually call the SDK’s API.","type":"text"}],"type":"paragraph"},{"text":"How to set additional data (optional)","level":3,"anchor":"How-to-set-additional-data-optional","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set additional data in order to configure HUMNAN’s backend with additional parameters."}]},{"type":"paragraph","inlineContent":[{"text":"Those parameters can be set with a dictionary (iOS) or an hash map (Android).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You should call the ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/setAdditionalData(parameters:forAppId:)","isActive":true,"type":"reference"},{"type":"text","text":" only after the "},{"isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:delegate:policy:)","type":"reference"},{"text":" function was already called.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here is how it should be:"}],"type":"paragraph"},{"text":"Android","anchor":"Android","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Kotlin:","type":"text"}]},{"syntax":"kotlin","code":["import com.humansecurity.mobile_sdk.HumanSecurity","","fun setAdditionalDataForAccountDefender() {","    try {","        val additionalData = HashMap<String, String>()","        additionalData[\"my_key1\"] = \"hello\"","        additionalData[\"my_key2\"] = \"world\"","        HumanSecurity.setAdditionalData(additionalData, \"<APP_ID>\")","    }","    catch (exception: Exception) {","       println(\"Exception: ${exception.message}\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Java:"}],"type":"paragraph"},{"type":"codeListing","code":["import com.humansecurity.mobile_sdk.HumanSecurity;","","void setAdditionalDataForAccountDefender() {","    try {","        HashMap<String, String> additionalData = new HashMap<>();","        additionalData.put(\"my_key1\", \"hello\");","        additionalData.put(\"my_key2\", \"world\");","        HumanSecurity.INSTANCE.setAdditionalData(additionalData, \"<APP_ID>\");","    }","    catch {","        Log.e(\"MainApplication\",\"Exception: \" + exception.getMessage());","    }","}"],"syntax":"java"},{"text":"iOS","anchor":"iOS","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"type":"codeListing","code":["import HUMAN","","func setAdditionalDataForAccountDefender() {","    do {","        var additionalData = [String: String]()","        additionalData[\"my_key1\"] = \"hello\"","        additionalData[\"my_key2\"] = \"world\"","        try HumanSecurity.setAdditionalData(parameters: additionalData, forAppId: \"<APP_ID>\")","    }","    catch {","        print(\"Error: \\(error)\")","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"code":["@import HUMAN;","","- (void)setAdditionalDataForAccountDefender {","    NSMutableDictionary<NSString *, NSString *> *additionalData = [[NSMutableDictionary<NSString *, NSString *> alloc] init];","    additionalData[@\"my_key1\"] = @\"hello\";","    additionalData[@\"my_key2\"] = @\"world\";","    error = nil;","    [HumanSecurity setAdditionalDataWithParameters:additionalData forAppId:@\"<APP_ID>\" error:&error];","    if (error != nil) {","        NSLog(@\"Error: %@\", error);","    }","}"],"syntax":"objc","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/human\/native_advanced_functionality"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/human\/native_advanced_functionality"]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/Native_Advanced_Functionality"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/setAdditionalData(parameters:forAppId:)":{"url":"\/documentation\/human\/humansecurity\/setadditionaldata(parameters:forappid:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/setAdditionalData(parameters:forAppId:)","navigatorTitle":[{"kind":"identifier","text":"setAdditionalDataWithParameters:forAppId:error:"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setAdditionalData","kind":"identifier"},{"text":"(","kind":"text"},{"text":"parameters","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"forAppId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?) "},{"text":"throws","kind":"keyword"}],"role":"symbol","title":"setAdditionalData(parameters:forAppId:)","kind":"symbol","abstract":[{"text":"Set additional data that support Account Defender for given AppID.","type":"text"}],"type":"topic"},"https://developer.apple.com/documentation/foundation/urlsession":{"url":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession","type":"link","title":"URLSession","titleInlineContent":[{"type":"codeVoice","code":"URLSession"}]},"https://square.github.io/okhttp/":{"identifier":"https:\/\/square.github.io\/okhttp\/","titleInlineContent":[{"type":"text","text":"OkHttp"}],"url":"https:\/\/square.github.io\/okhttp\/","type":"link","title":"OkHttp"},"#bot-defender-integration":{"url":"#bot-defender-integration","identifier":"#bot-defender-integration","type":"link","title":"Bot Defender integration","titleInlineContent":[{"type":"text","text":"Bot Defender integration"}]},"#how-to-start-the-sdk":{"identifier":"#how-to-start-the-sdk","titleInlineContent":[{"type":"text","text":"How to start the SDK"}],"url":"#how-to-start-the-sdk","type":"link","title":"How to start the SDK"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/start(appIds:delegate:policy:)":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"appIds"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"], "},{"text":"delegate","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@HUMAN@objc(pl)HumanDelegate","text":"HumanDelegate"},{"kind":"text","text":"?, "},{"text":"policy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@HUMAN@objc(cs)HSPolicy","text":"HSPolicy"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"navigatorTitle":[{"kind":"identifier","text":"startWithAppIds:delegate:policy:error:"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appIds:delegate:policy:)","kind":"symbol","abstract":[{"text":"Start the SDK.","type":"text"}],"title":"start(appIds:delegate:policy:)","url":"\/documentation\/human\/humansecurity\/start(appids:delegate:policy:)"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAutomaticInterceptorPolicy/urlSessionConfiguration":{"url":"\/documentation\/human\/hsautomaticinterceptorpolicy\/urlsessionconfiguration","type":"topic","navigatorTitle":[{"text":"urlSessionConfiguration","kind":"identifier"}],"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorPolicy\/urlSessionConfiguration","abstract":[{"type":"text","text":"The "},{"code":"URLSessionConfiguration","type":"codeVoice"},{"text":" that should be used by the SDK. Default is ","type":"text"},{"code":"URLSessionConfiguration.default","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"urlSessionConfiguration"},{"kind":"text","text":": "},{"text":"URLSessionConfiguration","preciseIdentifier":"c:objc(cs)NSURLSessionConfiguration","kind":"typeIdentifier"}],"title":"urlSessionConfiguration","kind":"symbol","role":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSPolicy":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HSPolicy"}],"navigatorTitle":[{"text":"HSPolicy","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSPolicy","type":"topic","title":"HSPolicy","abstract":[{"text":"The policy that define the behaviour of the SDK.","type":"text"}],"url":"\/documentation\/human\/hspolicy"},"#account-defender-integration":{"url":"#account-defender-integration","identifier":"#account-defender-integration","type":"link","title":"Account Defender integration","titleInlineContent":[{"type":"text","text":"Account Defender integration"}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN":{"role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN","abstract":[{"identifier":"HUMAN_logo.png","type":"image"}],"title":"HUMAN","url":"\/documentation\/human"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/start(appId:delegate:policy:)":{"url":"\/documentation\/human\/humansecurity\/start(appid:delegate:policy:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/start(appId:delegate:policy:)","navigatorTitle":[{"kind":"identifier","text":"startWithAppId:delegate:policy:error:"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"appId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"delegate","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:@M@HUMAN@objc(pl)HumanDelegate","text":"HumanDelegate","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"policy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@HUMAN@objc(cs)HSPolicy","text":"HSPolicy"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"role":"symbol","title":"start(appId:delegate:policy:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Start the SDK."}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAutomaticInterceptorType/interceptWithDelayedResponse":{"url":"\/documentation\/human\/hsautomaticinterceptortype\/interceptwithdelayedresponse","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Same as "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/intercept","isActive":true,"type":"reference"},{"text":". The SDK delays the error response to your app until the user solve or cancel the challenge. In order to delay the request’s response to your handler until the user interacts with the challenge, you must disable the request’s timeout. Otherwise, your handler will receive a timeout error and you might not know that your request was blocked nor the challenge was solved\/cancelled.","type":"text"}],"navigatorTitle":[{"text":"HSAutomaticInterceptorTypeInterceptWithDelayedResponse","kind":"identifier"}],"title":"HSAutomaticInterceptorType.interceptWithDelayedResponse","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/interceptWithDelayedResponse","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"interceptWithDelayedResponse"}],"kind":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAutomaticInterceptorType/interceptAndRetryRequest":{"url":"\/documentation\/human\/hsautomaticinterceptortype\/interceptandretryrequest","role":"symbol","type":"topic","abstract":[{"text":"Same as ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/interceptWithDelayedResponse","isActive":true,"type":"reference"},{"text":". When the challenge is solved, the SDK will send the original request one more time. Your request’s handler should receive the response from your server without knowing that the request was blocked and sent again. You should note that when the challenge is cancelled or when the second request is also blocked, then the behavior will be the same as the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/interceptWithDelayedResponse"},{"type":"text","text":". In order to delay the request’s response to your handler until the user interacts with the challenge, you must disable the request’s timeout. Otherwise, your handler will receive a timeout error and you might not know that your request was blocked nor the challenge was solved\/cancelled."}],"navigatorTitle":[{"text":"HSAutomaticInterceptorTypeInterceptAndRetryRequest","kind":"identifier"}],"title":"HSAutomaticInterceptorType.interceptAndRetryRequest","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/interceptAndRetryRequest","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"interceptAndRetryRequest","kind":"identifier"}],"kind":"symbol"},"https://square.github.io/okhttp/features/interceptors/":{"title":"Interceptors","url":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","identifier":"https:\/\/square.github.io\/okhttp\/features\/interceptors\/","type":"link","titleInlineContent":[{"type":"text","text":"Interceptors"}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAutomaticInterceptorType/intercept":{"type":"topic","url":"\/documentation\/human\/hsautomaticinterceptortype\/intercept","navigatorTitle":[{"text":"HSAutomaticInterceptorTypeIntercept","kind":"identifier"}],"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType\/intercept","abstract":[{"type":"text","text":"The SDK intercepts URL requests in order to add HTTP headers and handle block responses."},{"text":" ","type":"text"},{"text":"The SDK can intercept those types of requests:","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"intercept","kind":"identifier"}],"title":"HSAutomaticInterceptorType.intercept","kind":"symbol","role":"symbol"},"https://github.com/Alamofire/Alamofire":{"url":"https:\/\/github.com\/Alamofire\/Alamofire","identifier":"https:\/\/github.com\/Alamofire\/Alamofire","type":"link","title":"Alamofire","titleInlineContent":[{"type":"codeVoice","code":"Alamofire"}]},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HumanSecurity/setCustomParameters(parameters:forAppId:)":{"navigatorTitle":[{"text":"setCustomParametersWithParameters:forAppId:error:","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/human\/humansecurity\/setcustomparameters(parameters:forappid:)","title":"setCustomParameters(parameters:forAppId:)","abstract":[{"type":"text","text":"Set custom parameters for given AppID."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"setCustomParameters","kind":"identifier"},{"kind":"text","text":"("},{"text":"parameters","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":" : ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"forAppId","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"text":"throws","kind":"keyword"}],"role":"symbol","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HumanSecurity\/setCustomParameters(parameters:forAppId:)"},"doc://com.perimeterx.mobile-sdk/documentation/HUMAN/HSAutomaticInterceptorType":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"HSAutomaticInterceptorType","kind":"identifier"}],"abstract":[{"type":"text","text":"The Automatic Interceptor type."}],"navigatorTitle":[{"kind":"identifier","text":"HSAutomaticInterceptorType"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/HUMAN\/HSAutomaticInterceptorType","title":"HSAutomaticInterceptorType","kind":"symbol","url":"\/documentation\/human\/hsautomaticinterceptortype"}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","value":"occ","path":"\/identifier\/interfaceLanguage"},{"path":"\/topicSections","value":null,"op":"add"},{"op":"add","path":"\/seeAlsoSections","value":null},{"op":"replace","value":"setAdditionalDataWithParameters:forAppId:error:","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1setAdditionalData(parameters:forAppId:)\/title"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1setAdditionalData(parameters:forAppId:)\/fragments","op":"replace","value":[{"text":"+ ","kind":"text"},{"kind":"identifier","text":"setAdditionalDataWithParameters:forAppId:error:"}]},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appIds:delegate:policy:)\/title","op":"replace","value":"startWithAppIds:delegate:policy:error:"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appIds:delegate:policy:)\/fragments","op":"replace","value":[{"kind":"text","text":"+ "},{"kind":"identifier","text":"startWithAppIds:delegate:policy:error:"}]},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorPolicy~1urlSessionConfiguration\/title","value":"urlSessionConfiguration","op":"replace"},{"value":[{"kind":"identifier","text":"urlSessionConfiguration"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorPolicy~1urlSessionConfiguration\/fragments"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSPolicy\/title","op":"replace","value":"HSPolicy"},{"value":[{"kind":"identifier","text":"HSPolicy"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSPolicy\/fragments"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appId:delegate:policy:)\/title","value":"startWithAppId:delegate:policy:error:","op":"replace"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1start(appId:delegate:policy:)\/fragments","op":"replace","value":[{"kind":"text","text":"+ "},{"text":"startWithAppId:delegate:policy:error:","kind":"identifier"}]},{"value":"HSAutomaticInterceptorTypeInterceptWithDelayedResponse","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1interceptWithDelayedResponse\/title","op":"replace"},{"value":[{"text":"HSAutomaticInterceptorTypeInterceptWithDelayedResponse","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1interceptWithDelayedResponse\/fragments"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1interceptAndRetryRequest\/title","op":"replace","value":"HSAutomaticInterceptorTypeInterceptAndRetryRequest"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1interceptAndRetryRequest\/fragments","value":[{"text":"HSAutomaticInterceptorTypeInterceptAndRetryRequest","kind":"identifier"}]},{"value":"HSAutomaticInterceptorTypeIntercept","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1intercept\/title"},{"value":[{"kind":"identifier","text":"HSAutomaticInterceptorTypeIntercept"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType~1intercept\/fragments","op":"replace"},{"value":"setCustomParametersWithParameters:forAppId:error:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1setCustomParameters(parameters:forAppId:)\/title"},{"value":[{"text":"+ ","kind":"text"},{"kind":"identifier","text":"setCustomParametersWithParameters:forAppId:error:"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HumanSecurity~1setCustomParameters(parameters:forAppId:)\/fragments"},{"value":"HSAutomaticInterceptorType","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType\/title","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1HUMAN~1HSAutomaticInterceptorType\/fragments","value":[{"text":"HSAutomaticInterceptorType","kind":"identifier"}]}]}]}